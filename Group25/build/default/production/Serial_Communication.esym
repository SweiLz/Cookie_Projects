D G "__PCD__" 0 0 ""5.015""
D G "__DEVICE__" 0 0 ""
D G "__DATE__" 0 0 ""25-¾.Â.-16""
D G "__TIME__" 0 0 ""16:28:15""
D G "__PIC24FJ48GA002__" 0 0 "1" "Standard Header file for the PIC24FJ48GA002 device ////////////////"
c L "set_tris_a" 1 3 6 "FUNCTION"
v L "value" 1 44 "int16" `53 
f B "set_tris_a" 1 44 "void(int16 value)" `52 
v L "value" 1 45 "int16" `55 
f B "set_tris_b" 1 45 "void(int16 value)" `54 
f B "get_tris_a" 1 46 "int16()" `56 
f B "get_tris_b" 1 47 "int16()" `57 
v L "value" 1 48 "int16" `59 
f B "output_a" 1 48 "void(int16 value)" `58 
v L "value" 1 49 "int16" `61 
f B "output_b" 1 49 "void(int16 value)" `60 
f B "input_a" 1 50 "int16()" `62 
f B "input_b" 1 51 "int16()" `63 
f B "input_change_a" 1 52 "int8()" `64 
f B "input_change_b" 1 53 "int8()" `65 
v L "state" 1 54 "int8" `67 
f B "set_pullup" 1 54 "void(int8 state)" `66 
v L "state" 1 55 "int8" `69 
v L "pin" 1 55 "int16" `70 
f G "set_pullup" 1 55 "void(int8 state,int16 pin)" `68 
v L "state" 1 56 "int8" `72 
f B "set_pulldown" 1 56 "void(int8 state)" `71 
v L "state" 1 57 "int8" `74 
v L "pin" 1 57 "int16" `75 
f G "set_pulldown" 1 57 "void(int8 state,int16 pin)" `73 
v L "pin" 1 58 "int16" `77 
f B "input" 1 58 "int8(int16 pin)" `76 
v L "pin" 1 59 "int16" `79 
f B "input_state" 1 59 "int8(int16 pin)" `78 
v L "pin" 1 60 "int16" `81 
f B "output_low" 1 60 "void(int16 pin)" `80 
v L "pin" 1 61 "int16" `83 
f B "output_high" 1 61 "void(int16 pin)" `82 
v L "pin" 1 62 "int16" `85 
f B "output_toggle" 1 62 "void(int16 pin)" `84 
v L "pin" 1 63 "int16" `87 
v L "level" 1 63 "int8" `88 
f B "output_bit" 1 63 "void(int16 pin,int8 level)" `86 
v L "pin" 1 64 "int16" `90 
f B "output_float" 1 64 "void(int16 pin)" `89 
v L "pin" 1 65 "int16" `92 
f B "output_drive" 1 65 "void(int16 pin)" `91  "Constants used to identify pins in the above are:"
d G "PIN_A0" 1 68 "5648"
d G "PIN_A1" 1 69 "5649"
d G "PIN_A2" 1 70 "5650"
d G "PIN_A3" 1 71 "5651"
d G "PIN_A4" 1 72 "5652"
d G "PIN_B0" 1 74 "5712"
d G "PIN_B1" 1 75 "5713"
d G "PIN_B2" 1 76 "5714"
d G "PIN_B3" 1 77 "5715"
d G "PIN_B4" 1 78 "5716"
d G "PIN_B5" 1 79 "5717"
d G "PIN_B6" 1 80 "5718"
d G "PIN_B7" 1 81 "5719"
d G "PIN_B8" 1 82 "5720"
d G "PIN_B9" 1 83 "5721"
d G "PIN_B10" 1 84 "5722"
d G "PIN_B11" 1 85 "5723"
d G "PIN_B12" 1 86 "5724"
d G "PIN_B13" 1 87 "5725"
d G "PIN_B14" 1 88 "5726"
d G "PIN_B15" 1 89 "5727"
d G "FALSE" 1 92 "0"
d G "TRUE" 1 93 "1"
d G "BYTE" 1 95 "unsigned int8"
d G "BOOLEAN" 1 96 "int1"
d G "getc" 1 98 "getch"
d G "fgetc" 1 99 "getch"
d G "getchar" 1 100 "getch"
d G "putc" 1 101 "putchar"
d G "fputc" 1 102 "putchar"
d G "fgets" 1 103 "gets"
d G "fputs" 1 104 "puts"
c L "output_drive" 1 3 2 "FUNCTION"
v L "baud" 1 108 "int32" `94 
f B "setup_uart" 1 108 "void(int32 baud)" `93 
v L "baud" 1 109 "int32" `96 
v L "stream" 1 109 "int8" `97 
f G "setup_uart" 1 109 "void(int32 baud,int8 stream)" `95 
v L "baud" 1 110 "int32" `99 
v L "stream" 1 110 "int8" `100 
v L "clock" 1 110 "int32" `101 
f G "setup_uart" 1 110 "void(int32 baud,int8 stream,int32 clock)" `98 
v L "baud" 1 111 "int32" `103 
f B "set_uart_speed" 1 111 "void(int32 baud)" `102 
v L "baud" 1 112 "int32" `105 
v L "stream" 1 112 "int8" `106 
f G "set_uart_speed" 1 112 "void(int32 baud,int8 stream)" `104 
v L "baud" 1 113 "int32" `108 
v L "stream" 1 113 "int8" `109 
v L "clock" 1 113 "int32" `110 
f G "set_uart_speed" 1 113 "void(int32 baud,int8 stream,int32 clock)" `107  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 1 117 "2"
d G "UART_DATA" 1 118 "4"
d G "UART_AUTODETECT" 1 119 "8"
d G "UART_AUTODETECT_NOWAIT" 1 120 "9"
d G "UART_WAKEUP_ON_RDA" 1 121 "10"
d G "UART_SEND_BREAK" 1 122 "13"
c L "set_uart_speed" 1 3 3 "FUNCTION"
v L "mode" 1 127 "int8" `112 
f B "setup_wdt" 1 127 "void(int8 mode)" `111 
f B "restart_wdt" 1 128 "void()" `113  "Constants used for SETUP_WDT() are:"
d G "WDT_ON" 1 130 "1"
d G "WDT_OFF" 1 131 "0"
d G "WDT_1MS" 1 133 "0x002"
d G "WDT_2MS" 1 134 "0x003"
d G "WDT_4MS" 1 135 "0x004"
d G "WDT_8MS" 1 136 "0x005"
d G "WDT_16MS" 1 137 "0x006"
d G "WDT_32MS" 1 138 "0x007"
d G "WDT_64MS" 1 139 "0x008"
d G "WDT_128MS" 1 140 "0x009"
d G "WDT_256MS" 1 141 "0x00A"
d G "WDT_512MS" 1 142 "0x00B"
d G "WDT_1S" 1 143 "0x00C"
d G "WDT_2S" 1 144 "0x00D"
d G "WDT_4S" 1 145 "0x00E"
d G "WDT_8S" 1 146 "0x00F"
d G "WDT_16S" 1 147 "0x010"
d G "WDT_33S" 1 148 "0x011"
d G "WDT_65S" 1 149 "0x030"
d G "WDT_131S" 1 150 "0x031"
c L "restart_wdt" 1 3 3 "FUNCTION"
f B "restart_cause" 1 155 "int8()" `114 
f B "reset_cpu" 1 156 "void()" `115 
f B "sleep" 1 157 "void()" `116 
v L "mode" 1 158 "int8" `118 
f G "sleep" 1 158 "void(int8 mode)" `117  "Constants passed into RESTART_CAUSE() are:"
d G "RESTART_POWER_UP" 1 160 "0"
d G "RESTART_BROWNOUT" 1 161 "1"
d G "RESTART_WATCHDOG" 1 162 "4"
d G "RESTART_SOFTWARE" 1 163 "6"
d G "RESTART_MCLR" 1 164 "7"
d G "RESTART_ILLEGAL_OP" 1 165 "14"
d G "RESTART_TRAP_CONFLICT" 1 166 "15"
d G "SLEEP_FULL" 1 169 "0" "Default"
d G "SLEEP_IDLE" 1 170 "1" "Clock and peripherals don't stop"
c L "sleep" 1 3 2 "FUNCTION"
v L "type" 1 174 "int8" `120 
v L "target" 1 174 "int32" `121 
f B "setup_oscillator" 1 174 "void(int8 type,int32 target)" `119 
v L "type" 1 175 "int8" `123 
v L "target" 1 175 "int32" `124 
v L "source" 1 175 "int32" `125 
f G "setup_oscillator" 1 175 "void(int8 type,int32 target,int32 source)" `122  "Constants used in setup_oscillator() are:"
d G "OSC_INTERNAL" 1 177 "32"
d G "OSC_CRYSTAL" 1 178 "1"
d G "OSC_CLOCK" 1 179 "2"
d G "OSC_RC" 1 180 "3"
d G "OSC_SECONDARY" 1 181 "16"
c L "setup_oscillator" 1 3 4 "FUNCTION"
v L "mode" 1 187 "int16" `127 
f B "setup_timer1" 1 187 "void(int16 mode)" `126 
v L "mode" 1 188 "int16" `129 
v L "period" 1 188 "int16" `130 
f G "setup_timer1" 1 188 "void(int16 mode,int16 period)" `128 
f B "get_timer1" 1 189 "int16()" `131 
v L "value" 1 190 "int16" `133 
f B "set_timer1" 1 190 "void(int16 value)" `132 
v L "mode" 1 191 "int16" `135 
f B "setup_timer2" 1 191 "void(int16 mode)" `134 
v L "mode" 1 192 "int16" `137 
v L "period" 1 192 "int16" `138 
f G "setup_timer2" 1 192 "void(int16 mode,int16 period)" `136 
f B "get_timer2" 1 193 "int16()" `139 
v L "value" 1 194 "int16" `141 
f B "set_timer2" 1 194 "void(int16 value)" `140 
v L "mode" 1 195 "int16" `143 
f B "setup_timer3" 1 195 "void(int16 mode)" `142 
v L "mode" 1 196 "int16" `145 
v L "period" 1 196 "int16" `146 
f G "setup_timer3" 1 196 "void(int16 mode,int16 period)" `144 
f B "get_timer3" 1 197 "int16()" `147 
v L "value" 1 198 "int16" `149 
f B "set_timer3" 1 198 "void(int16 value)" `148 
f B "get_timer23" 1 199 "int32()" `150 
v L "value" 1 200 "int32" `152 
f B "set_timer23" 1 200 "void(int32 value)" `151 
v L "mode" 1 201 "int16" `154 
f B "setup_timer4" 1 201 "void(int16 mode)" `153 
v L "mode" 1 202 "int16" `156 
v L "period" 1 202 "int16" `157 
f G "setup_timer4" 1 202 "void(int16 mode,int16 period)" `155 
f B "get_timer4" 1 203 "int16()" `158 
v L "value" 1 204 "int16" `160 
f B "set_timer4" 1 204 "void(int16 value)" `159 
v L "mode" 1 205 "int16" `162 
f B "setup_timer5" 1 205 "void(int16 mode)" `161 
v L "mode" 1 206 "int16" `164 
v L "period" 1 206 "int16" `165 
f G "setup_timer5" 1 206 "void(int16 mode,int16 period)" `163 
f B "get_timer5" 1 207 "int16()" `166 
v L "value" 1 208 "int16" `168 
f B "set_timer5" 1 208 "void(int16 value)" `167 
f B "get_timer45" 1 209 "int32()" `169 
v L "value" 1 210 "int32" `171 
f B "set_timer45" 1 210 "void(int32 value)" `170  "Constants used for SETUP_TIMERx() are:"
d G "TMR_DISABLED" 1 213 "0x0000"
d G "TMR_INTERNAL" 1 214 "0x8000"
d G "TMR_EXTERNAL" 1 215 "0x8002"
d G "TMR_GATE" 1 216 "0x0040"
d G "TMR_DIV_BY_1" 1 218 "0x0000"
d G "TMR_DIV_BY_8" 1 219 "0x0010"
d G "TMR_DIV_BY_64" 1 220 "0x0020"
d G "TMR_DIV_BY_256" 1 221 "0x0030"
d G "TMR_32_BIT" 1 222 "0x0008" "Only for even numbered timers"
d G "TMR_HALT_IDLE" 1 224 "0x2000"
d G "TMR_CONTINUE_IDLE" 1 225 "0x0000"
d G "T1_EXTERNAL_SYNC" 1 227 "0x8006" "This only applies to Timer1"
d G "T1_EXTERNAL_RTC" 1 228 "0xC002" "This only applies to Timer1"
c L "set_timer45" 1 3 3 "FUNCTION"
v L "module" 1 232 "int8" `173 
v L "mode" 1 232 "int16" `174 
f B "setup_capture" 1 232 "void(int8 module,int16 mode)" `172 
v L "module" 1 233 "int8" `176 
f B "get_capture" 1 233 "int16(int8 module)" `175 
v L "module" 1 234 "int8" `178 
v L "wait" 1 234 "int8" `179 
f G "get_capture" 1 234 "int16(int8 module,int8 wait)" `177  "Constants used for SETUP_CAPTURE() are:"
d G "CAPTURE_OFF" 1 236 "0x0000" "Capture OFF"
d G "CAPTURE_EE" 1 237 "0x0001" "Capture Every Edge"
d G "CAPTURE_FE" 1 238 "0x0002" "Capture Falling Edge"
d G "CAPTURE_RE" 1 239 "0x0003" "Capture Rising Edge"
d G "CAPTURE_DIV_4" 1 240 "0x0004" "Capture Every 4th Rising Edge"
d G "CAPTURE_DIV_16" 1 241 "0x0005" "Capture Every 16th Rising Edge"
d G "CAPTURE_INTERRUPT_ONLY" 1 242 "0x0007" "Interrupt on Rising Edge when in Sleep or Idle"
d G "INTERRUPT_EVERY_CAPTURE" 1 245 "0x0000" "Interrupt on every capture event"
d G "INTERRUPT_SECOND_CAPTURE" 1 246 "0x0020" "Interrupt on every second capture event"
d G "INTERRUPT_THIRD_CAPTURE" 1 247 "0x0040" "Interrupt on every third capture event"
d G "INTERRUPT_FOURTH_CAPTURE" 1 248 "0x0060" "Interrupt on every fourth capture event"
d G "CAPTURE_TIMER2" 1 251 "0x0080" "On capture event Timer 2 is captured"
d G "CAPTURE_TIMER3" 1 252 "0x0000" "On capture event Timer 3 is captured"
d G "CAPTURE_HALT_IDLE" 1 255 "0x2000" "Capture module halts during idle mode"
d G "CAPTURE_CONTINUE_IDLE" 1 256 "0x0000" "Capture module continues during idle mode"
c L "get_capture" 1 3 3 "FUNCTION"
v L "module" 1 261 "int8" `181 
v L "mode" 1 261 "int16" `182 
f B "setup_compare" 1 261 "void(int8 module,int16 mode)" `180 
v L "module" 1 262 "int8" `184 
v L "duty" 1 262 "int16" `185 
f B "set_pwm_duty" 1 262 "void(int8 module,int16 duty)" `183 
v L "module" 1 263 "int8" `187 
v L "ocr" 1 263 "int16" `188 
f B "set_compare_time" 1 263 "void(int8 module,int16 ocr)" `186 
v L "module" 1 264 "int8" `190 
v L "ocr" 1 264 "int16" `191 
v L "ocrs" 1 264 "int16" `192 
f G "set_compare_time" 1 264 "void(int8 module,int16 ocr,int16 ocrs)" `189  "Constants used for SETUP_COMPARE() are:"
d G "COMPARE_OFF" 1 266 "0x0000" "Compare OFF"
d G "COMPARE_SET_ON_MATCH" 1 267 "0x0001" "Pin from low to high on match"
d G "COMPARE_CLR_ON_MATCH" 1 268 "0x0002" "Pin from high to low on match"
d G "COMPARE_TOGGEL" 1 269 "0x0003" "Pin will toggle on every match occurrence"
d G "COMPARE_SINGLE_PULSE" 1 270 "0x0004" "Pin will generate single pulse on first match"
d G "COMPARE_CONT_PULSE" 1 271 "0x0005" "Pin will pulse for every match"
d G "COMPARE_PWM" 1 272 "0x0006" "Compare operates as PWM with fault pin disabled"
d G "COMPARE_PWM_FAULT" 1 273 "0x0007" "Compare operates as PWM with fault pin enabled"
d G "COMPARE_TIMER2" 1 276 "0x0000" "Timer 2 is the base timer"
d G "COMPARE_TIMER3" 1 277 "0x0008" "Timer 3 is the base timer"
d G "COMPARE_HALT_IDLE" 1 280 "0x2000" "Compare module halts during idle mode"
d G "COMPARE_CONTINUE_IDLE" 1 281 "0x0000" "Compare module continues during idle mode"
c L "set_compare_time" 1 3 3 "FUNCTION"
v L "mode" 1 286 "int16" `194 
f B "setup_spi" 1 286 "void(int16 mode)" `193 
v L "data" 1 287 "int8" `196 
f B "spi_write" 1 287 "void(int8 data)" `195 
f B "spi_read" 1 288 "int8()" `197 
v L "data" 1 289 "int8" `199 
f G "spi_read" 1 289 "int8(int8 data)" `198 
f B "spi_data_in" 1 290 "int8()" `200 
v L "mode" 1 291 "int16" `202 
f B "setup_spi2" 1 291 "void(int16 mode)" `201 
v L "data" 1 292 "int8" `204 
f B "spi_write2" 1 292 "void(int8 data)" `203 
f B "spi_read2" 1 293 "int8()" `205 
v L "data" 1 294 "int8" `207 
f G "spi_read2" 1 294 "int8(int8 data)" `206 
f B "spi_data_in2" 1 295 "int8()" `208  "Constants used in SETUP_SPI() are:"
d G "SPI_MASTER" 1 298 "0x0020"
d G "SPI_SLAVE" 1 299 "0x0000"
d G "SPI_SCK_IDLE_HIGH" 1 301 "0x0040"
d G "SPI_SCK_IDLE_LOW" 1 302 "0x0000"
d G "SPI_XMIT_L_TO_H" 1 304 "0x0100"
d G "SPI_XMIT_H_TO_L" 1 305 "0x0000"
d G "SPI_MODE_16B" 1 307 "0x0400"
d G "SPI_MODE_8B" 1 308 "0x0000"
d G "SPI_SAMPLE_AT_END" 1 310 "0x0200"
d G "SPI_SAMPLE_AT_MIDDLE" 1 311 "0x0000"
d G "SPI_SS_ENABLED" 1 313 "0x0000"
d G "SPI_SS_DISABLED" 1 314 "0x0080"
d G "SPI_CLK_DIV_1" 1 317 "0x001F"
d G "SPI_CLK_DIV_2" 1 318 "0x001B"
d G "SPI_CLK_DIV_3" 1 319 "0x0017"
d G "SPI_CLK_DIV_4" 1 320 "0x001E"
d G "SPI_CLK_DIV_5" 1 321 "0x000F"
d G "SPI_CLK_DIV_6" 1 322 "0x000B"
d G "SPI_CLK_DIV_7" 1 323 "0x0007"
d G "SPI_CLK_DIV_8" 1 324 "0x0003"
d G "SPI_CLK_DIV_12" 1 325 "0x0016"
d G "SPI_CLK_DIV_16" 1 326 "0x001D"
d G "SPI_CLK_DIV_20" 1 327 "0x000E"
d G "SPI_CLK_DIV_24" 1 328 "0x000A"
d G "SPI_CLK_DIV_28" 1 329 "0x0006"
d G "SPI_CLK_DIV_32" 1 330 "0x0002"
d G "SPI_CLK_DIV_48" 1 331 "0x0015"
d G "SPI_CLK_DIV_64" 1 332 "0x001C"
d G "SPI_CLK_DIV_80" 1 333 "0x000D"
d G "SPI_CLK_DIV_96" 1 334 "0x0009"
d G "SPI_CLK_DIV_112" 1 335 "0x0005"
d G "SPI_CLK_DIV_128" 1 336 "0x0001"
d G "SPI_CLK_DIV_192" 1 337 "0x0014"
d G "SPI_CLK_DIV_256" 1 338 "0x0010"
d G "SPI_CLK_DIV_320" 1 339 "0x000C"
d G "SPI_CLK_DIV_384" 1 340 "0x0008"
d G "SPI_CLK_DIV_448" 1 341 "0x0004"
d G "SPI_CLK_DIV_512" 1 342 "0x0000"
d G "SPI_L_TO_H" 1 345 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 1 346 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in2" 1 3 4 "FUNCTION"
v L "mode" 1 352 "int32" `210 
f B "setup_adc" 1 352 "void(int32 mode)" `209 
v L "pins" 1 353 "int32" `212 
f B "setup_adc_ports" 1 353 "void(int32 pins)" `211 
v L "pins" 1 354 "int32" `214 
v L "reference" 1 354 "int16" `215 
f G "setup_adc_ports" 1 354 "void(int32 pins,int16 reference)" `213 
v L "??65535" 1 355 "int8" `217 
f B "set_adc_channel" 1 355 "void(int8 )" `216 
f B "read_adc" 1 356 "int16()" `218 
v L "mode" 1 357 "int8" `220 
f G "read_adc" 1 357 "int16(int8 mode)" `219 
f B "adc_done" 1 358 "int8()" `221  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 1 362 "0x10000"
d G "ADC_CLOCK" 1 363 "0x0000"
d G "ADC_CLOCK_DIV_2" 1 364 "0x0001"
d G "ADC_CLOCK_DIV_4" 1 365 "0x0003"
d G "ADC_CLOCK_DIV_8" 1 366 "0x0007"
d G "ADC_CLOCK_DIV_16" 1 367 "0x000F"
d G "ADC_CLOCK_DIV_32" 1 368 "0x001F"
d G "ADC_CLOCK_DIV_64" 1 369 "0x003F"
d G "ADC_CLOCK_INTERNAL" 1 370 "0x8000" "Internal"
d G "ADC_TAD_MUL_0" 1 374 "0x1F00"
d G "ADC_TAD_MUL_2" 1 375 "0x1D00"
d G "ADC_TAD_MUL_4" 1 376 "0x1B00"
d G "ADC_TAD_MUL_8" 1 377 "0x1700"
d G "ADC_TAD_MUL_16" 1 378 "0x0F00"
d G "ADC_TAD_MUL_31" 1 379 "0x0000"
d G "ADC_START_AND_READ" 1 382 "0x07"
d G "ADC_START_ONLY" 1 383 "0x01"
d G "ADC_READ_ONLY" 1 384 "0x06"
d G "NO_ANALOGS" 1 389 "0" "None"
d G "ALL_ANALOG" 1 390 "0xFFFFFFFF" "All"
d G "sAN0" 1 391 "0x00000001" "| A0"
d G "sAN1" 1 392 "0x00000002" "| A1"
d G "sAN2" 1 393 "0x00000004" "| B0"
d G "sAN3" 1 394 "0x00000008" "| B1"
d G "sAN4" 1 395 "0x00000010" "| B2"
d G "sAN5" 1 396 "0x00000020" "| B3"
d G "sAN9" 1 397 "0x00000200" "| B15"
d G "sAN10" 1 398 "0x00000400" "| B14"
d G "sAN11" 1 399 "0x00000800" "| B13"
d G "sAN12" 1 400 "0x00001000" "| B12"
d G "VSS_VDD" 1 403 "0x0000" "Range 0-Vdd"
d G "VREF_VREF" 1 404 "0x6000" "Range VrefL-VrefH"
d G "VREF_VDD" 1 405 "0x4000" "Range VrefL-Vdd"
d G "VSS_VREF" 1 406 "0x2000" "Range 0-VrefH"
c L "adc_done" 1 3 4 "FUNCTION"
v L "mode" 1 412 "int16" `223 
f B "setup_comparator" 1 412 "void(int16 mode)" `222  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 1 414 "0"
d G "B2_B3_NC_NC" 1 415 "0x401"
d G "B2_VR_NC_NC" 1 416 "0x400"
d G "B3_VR_NC_NC" 1 417 "0x402"
d G "NC_NC_B0_B1" 1 418 "0x804"
d G "NC_NC_B0_VR" 1 419 "0x800"
d G "NC_NC_B1_VR" 1 420 "0x808"
d G "B2_B3_B0_B1" 1 421 "B2_B3_NC_NC | NC_NC_B0_B1"
d G "B2_VR_B0_VR" 1 422 "B2_VR_NC_NC | NC_NC_B0_VR"
d G "B3_VR_B1_VR" 1 423 "B3_VR_NC_NC | NC_NC_B1_VR"
d G "C1_INVERT" 1 425 "0x10"
d G "C2_INVERT" 1 426 "0x20"
d G "C1_OUTPUT" 1 427 "0x100"
d G "C2_OUTPUT" 1 428 "0x200"
c L "setup_comparator" 1 3 2 "FUNCTION"
v L "mode" 1 435 "int16" `227 
f B "setup_vref" 1 435 "void(int16 mode)" `226  "Constants used in setup_vref() are:"
d G "VREF_DISABLED" 1 437 "0x0000"
d G "VREF_VSS_VDD" 1 438 "0x0080"
d G "VREF_ANALOG" 1 439 "0x0090"
d G "VREF_HIGH" 1 441 "0x0080"
d G "VREF_LOW" 1 442 "0x00A0"
d G "VREF_OUTPUT" 1 444 "0x0040"
c L "setup_vref" 1 3 7 "FUNCTION"
v L "mode" 1 453 "int32" `229 
v L "address_mask" 1 453 "int16" `230 
f B "setup_pmp" 1 453 "void(int32 mode,int16 address_mask)" `228 
v L "address" 1 454 "int16" `232 
f B "pmp_address" 1 454 "void(int16 address)" `231 
f B "pmp_read" 1 455 "int8()" `233 
v L "data" 1 456 "int8" `235 
f B "pmp_write" 1 456 "void(int8 data)" `234 
f B "pmp_output_full" 1 457 "int8()" `236 
f B "pmp_input_full" 1 458 "int8()" `237 
f B "pmp_overflow" 1 459 "int8()" `238 
v L "mode" 1 460 "int32" `240 
v L "address_mask" 1 460 "int16" `241 
f B "setup_psp" 1 460 "void(int32 mode,int16 address_mask)" `239 
f B "psp_read" 1 461 "int8()" `242 
v L "address" 1 462 "int16" `244 
f G "psp_read" 1 462 "int8(int16 address)" `243 
v L "data" 1 463 "int8" `246 
f B "psp_write" 1 463 "void(int8 data)" `245 
v L "data" 1 464 "int8" `248 
v L "address" 1 464 "int16" `249 
f G "psp_write" 1 464 "void(int8 data,int16 address)" `247 
f B "psp_output_full" 1 465 "int8()" `250 
f B "psp_input_full" 1 466 "int8()" `251 
f B "psp_overflow" 1 467 "int8()" `252  "Constants used in SETUP_PMP() and SETUP_PSP() are:"
d G "PAR_ENABLE" 1 469 "0x8000"
d G "PAR_DISABLE" 1 470 "0x0000" "Module enable/disable options"
d G "PAR_STOP_IN_IDLE" 1 471 "0x2000"
d G "PAR_CONTINUE_IN_IDLE" 1 472 "0x0000"
d G "PAR_ADDR_NOT_MULTIPLEXED" 1 473 "0x0000" "Address multiplexing options"
d G "PAR_LOW_ADDR_MULTIPLEXED" 1 474 "0x0800" "Address multiplexing options"
d G "PAR_FULL_ADDR_MULTIPLEXED" 1 475 "0x1000" "Address multiplexing options"
d G "PAR_PTBEEN_ENABLE" 1 476 "0x0400" "Byte Enable Port Enable bit"
d G "PAR_PTWREN_ENABLE" 1 477 "0x0200" "Write Enable Strobe bit"
d G "PAR_PTRDEN_ENABLE" 1 478 "0x0100" "Read/Write Strobe Port bit"
d G "PAR_ALP_ACTIVE_HIGH" 1 479 "0x0020" "Address latch polarity high"
d G "PAR_BEP_ACTIVE_HIGH" 1 480 "0x0004" "Byte Enable Polarity"
d G "PAR_WRSP_ACTIVE_HIGH" 1 481 "0x0002" "Write strobe Polarity bit"
d G "PAR_RDSP_ACTIVE_HIGH" 1 482 "0x0001" "Read strobe Polarity bit"
d G "PAR_CS_XX" 1 483 "0x0000" "Chip select pins used for address"
d G "PAR_CS_X1" 1 484 "0x0008" "Chip select pin 1 used, active high"
d G "PAR_CS_X0" 1 485 "0x0000" "Chip select pin 1 used, active low"
d G "PAR_CS_1X" 1 486 "0x0050" "Chip select pin 2 used, active high"
d G "PAR_CS_0X" 1 487 "0x0040" "Chip select pin 2 used, active low"
d G "PAR_CS_00" 1 488 "0x0080" "Chip select pins 1,2 used, active low"
d G "PAR_CS_11" 1 489 "0x0098" "Chip select pins 1,2 used, active high"
d G "PAR_CS_10" 1 490 "0x0090" "Chip select pins 1,2 used, 1 is active low, 2 is high"
d G "PAR_CS_01" 1 491 "0x0088" "Chip select pins 1,2 used, 1 is active high, 2 is low"
d G "PAR_INTR_ON_RW" 1 492 "0x20000000" "Interrupt on read write"
d G "PAR_NO_INTR_STALL_ACTIVATED" 1 493 "0x40000000" "No interrupt, processor stall activated"
d G "PAR_INTR_ON_3_RW_BUF" 1 494 "0x60000000" "Interrupt on write to Buffer 3 or read from Buffer 3"
d G "PAR_PSP_AUTO_INC" 1 495 "0x18000000" "Read write buffers auto increment"
d G "PAR_DEC_ADDR" 1 496 "0x10000000" "Increment the address"
d G "PAR_INC_ADDR" 1 497 "0x08000000" "Decrement the address"
d G "PAR_MASTER_MODE_1" 1 498 "0x03000000" "Master mode 1"
d G "PAR_MASTER_MODE_2" 1 499 "0x02000000" "Master mode 2"
d G "PAR_WAITB1" 1 500 "0x00000000" "1 Tcy Wait state for data setup R/W"
d G "PAR_WAITB2" 1 501 "0x00400000" "2 Tcy Wait state for data setup R/W"
d G "PAR_WAITB3" 1 502 "0x00800000" "3 Tcy Wait state for data setup R/W"
d G "PAR_WAITB4" 1 503 "0x00C00000" "4 Tcy Wait state for data setup R/W"
d G "PAR_WAITM0" 1 504 "0x00000000" "0 wait state for Read to byte"
d G "PAR_WAITM1" 1 505 "0x00040000" "1 Tcy wait state for Read to byte"
d G "PAR_WAITM2" 1 506 "0x00080000" "2 Tcy wait state for Read to byte"
d G "PAR_WAITM3" 1 507 "0x000C0000" "3 Tcy wait state for Read to byte"
d G "PAR_WAITM15" 1 508 "0x003C0000" "15 wait states"
d G "PAR_WAITE1" 1 509 "0x00000000" "1 Tcy Wait for data hold after strobe"
d G "PAR_WAITE2" 1 510 "0x00010000" "2 Tcy Wait for data hold after strobe"
d G "PAR_WAITE3" 1 511 "0x00020000" "3 Tcy Wait for data hold after strobe"
d G "PAR_WAITE4" 1 512 "0x00030000" "4 Tcy Wait for data hold after strobe"
c L "psp_overflow" 1 3 3 "FUNCTION"
v L "poly_terms" 1 517 "int8" `254 
f B "setup_crc" 1 517 "void(int8 poly_terms,*int8 _VA_LIST)" `253 
v L "value" 1 518 "int16" `257 
f B "crc_init" 1 518 "void(int16 value)" `256 
v L "data" 1 519 "int16" `259 
f B "crc_calc" 1 519 "int16(int16 data)" `258 
v L "ptr" 1 520 "*int16" `261 
v L "count" 1 520 "int16" `262 
f G "crc_calc" 1 520 "int16(*int16 ptr,int16 count)" `260 
v L "data" 1 521 "int8" `264 
f B "crc_calc8" 1 521 "int8(int8 data)" `263 
v L "ptr" 1 522 "*int8" `266 
v L "count" 1 522 "int16" `267 
f G "crc_calc8" 1 522 "int8(*int8 ptr,int16 count)" `265  "RTC"
c L "crc_calc8" 1 3 3 "FUNCTION"
c L "crc_calc8" 1 3 1 "FUNCTION"
c L "crc_calc8" 1 3 1 "FUNCTION"
t G "rtc_time_t" 1 538 "{int8 tm_year,int8 tm_temp,int8 tm_mday,int8 tm_mon,int8 tm_hour,int8 tm_wday,int8 tm_sec,int8 tm_min,int8 tm_isdst}" `278  "RTC Protoyptes:"
v L "mode" 1 540 "int16" `280 
v L "calibration" 1 540 "int8" `281 
f B "setup_rtc" 1 540 "void(int16 mode,int8 calibration)" `279 
v L "mode" 1 541 "int16" `283 
v L "mask" 1 541 "int16" `284 
v L "repeat" 1 541 "int8" `285 
f B "setup_rtc_alarm" 1 541 "void(int16 mode,int16 mask,int8 repeat)" `282 
v L "time" 1 542 "*rtc_time_t" `287 
f B "rtc_read" 1 542 "void(*rtc_time_t time)" `286 
v L "time" 1 543 "*rtc_time_t" `289 
f B "rtc_write" 1 543 "void(*rtc_time_t time)" `288 
v L "time" 1 544 "*rtc_time_t" `291 
f B "rtc_read_alarm" 1 544 "void(*rtc_time_t time)" `290 
v L "time" 1 545 "*rtc_time_t" `293 
f B "rtc_write_alarm" 1 545 "void(*rtc_time_t time)" `292  "Constants used in setup_rtc() are:  // Second param is calibration"
d G "RTC_ENABLE" 1 547 "0x8000"
d G "RTC_DISABLE" 1 548 "0"
d G "RTC_OUTPUT_SECONDS" 1 549 "0x20400"
d G "RTC_OUTPUT_ALARM" 1 550 "0x00400"
d G "RTC_ALARM_ENABLE" 1 553 "0x8000"
d G "RTC_ALARM_DISABLE" 1 554 "0"
d G "RTC_CHIME_ENABLE" 1 555 "0x4000"
d G "RTC_CHIME_DISABLE" 1 556 "0"
d G "RTC_ALARM_HALFSECOND" 1 558 "0x0000"
d G "RTC_ALARM_SECOND" 1 559 "0x0400"
d G "RTC_ALARM_10_SECONDS" 1 560 "0x0800"
d G "RTC_ALARM_MINUTE" 1 561 "0x0C00"
d G "RTC_ALARM_10_MINUTES" 1 562 "0x1000"
d G "RTC_ALARM_HOUR" 1 563 "0x1400"
d G "RTC_ALARM_DAY" 1 564 "0x1800"
d G "RTC_ALARM_WEEK" 1 565 "0x1C00"
d G "RTC_ALARM_MONTH" 1 566 "0x2000"
d G "RTC_ALARM_YEAR" 1 567 "0x2400"
c L "rtc_write_alarm" 1 3 3 "FUNCTION"
v L "x" 1 573 "sint8" `295 
f B "abs" 1 573 "sint8(sint8 x)" `294 
v L "x" 1 574 "sint16" `297 
f G "abs" 1 574 "sint16(sint16 x)" `296 
v L "x" 1 575 "sint32" `299 
f G "abs" 1 575 "sint32(sint32 x)" `298 
v L "x" 1 576 "float" `301 
f G "abs" 1 576 "float(float x)" `300 
v L "??65535" 1 577 "int8" `303 
v L "??65535" 1 577 "int8" `304 
f B "_mul" 1 577 "int16(int8 ,int8 )" `302 
v L "??65535" 1 578 "sint8" `303 
v L "??65535" 1 578 "sint8" `307 
f G "_mul" 1 578 "sint16(sint8 ,sint8 )" `305 
v L "??65535" 1 579 "int16" `303 
v L "??65535" 1 579 "int16" `310 
f G "_mul" 1 579 "int32(int16 ,int16 )" `308 
v L "??65535" 1 580 "sint16" `303 
v L "??65535" 1 580 "sint16" `313 
f G "_mul" 1 580 "sint32(sint16 ,sint16 )" `311 
v L "x" 1 581 "?" `315 
f G "abs" 1 581 "?(? x)" `314 
v L "x" 1 582 "?" `317 
f G "abs" 1 582 "?(? x)" `316 
v L "x" 1 583 "?" `319 
f G "abs" 1 583 "?(? x)" `318 
v L "x" 1 584 "?" `321 
f G "abs" 1 584 "?(? x)" `320 
v L "??65535" 1 585 "int32" `303 
v L "??65535" 1 585 "int32" `324 
f G "_mul" 1 585 "?(int32 ,int32 )" `322 
v L "??65535" 1 586 "sint32" `303 
v L "??65535" 1 586 "sint32" `327 
f G "_mul" 1 586 "?(sint32 ,sint32 )" `325 
v L "??65535" 1 587 "?" `303 
v L "??65535" 1 587 "?" `330 
f G "_mul" 1 587 "?(? ,? )" `328 
v L "??65535" 1 588 "?" `303 
v L "??65535" 1 588 "?" `333 
f G "_mul" 1 588 "?(? ,? )" `331  "Memory Manipulation Prototypes:"
v L "dest" 1 591 "*sint8" `335 
v L "src" 1 591 "*sint8" `336 
f B "strcpy" 1 591 "void(*sint8 dest,*sint8 src)" `334 
v L "dest" 1 592 "*sint8" `338 
v L "src" 1 592 "*sint8" `339 
f B "strcopy" 1 592 "void(*sint8 dest,*sint8 src)" `337 
v L "destination" 1 593 "*int8" `341 
v L "value" 1 593 "int8" `342 
v L "num" 1 593 "int16" `343 
f B "memset" 1 593 "void(*int8 destination,int8 value,int16 num)" `340 
v L "destination" 1 594 "*int8" `345 
v L "source" 1 594 "*int8" `346 
v L "num" 1 594 "int16" `347 
f B "memcpy" 1 594 "void(*int8 destination,*int8 source,int16 num)" `344  "Data Manipulators Prototypes:"
v L "address" 1 597 "*int8" `349 
v L "bytes" 1 597 "int8" `350 
v L "value" 1 597 "int8" `351 
f B "shift_left" 1 597 "int8(*int8 address,int8 bytes,int8 value)" `348 
v L "address" 1 598 "*int8" `353 
v L "bytes" 1 598 "int8" `354 
v L "value" 1 598 "int8" `355 
f B "shift_right" 1 598 "int8(*int8 address,int8 bytes,int8 value)" `352 
v L "address" 1 599 "*int8" `357 
v L "bytes" 1 599 "int8" `358 
f B "rotate_left" 1 599 "void(*int8 address,int8 bytes)" `356 
v L "address" 1 600 "*int8" `360 
v L "bytes" 1 600 "int8" `361 
f B "rotate_right" 1 600 "void(*int8 address,int8 bytes)" `359 
v L "value" 1 601 "int8" `363 
f B "swap" 1 601 "void(int8 value)" `362 
v L "var" 1 602 "int16" `365 
v L "offset" 1 602 "int8" `366 
f B "make8" 1 602 "int8(int16 var,int8 offset)" `364 
v L "var" 1 603 "int32" `365 
v L "offset" 1 603 "int8" `369 
f G "make8" 1 603 "int8(int32 var,int8 offset)" `367 
v L "varhigh" 1 604 "int8" `371 
v L "varlow" 1 604 "int8" `372 
f B "make16" 1 604 "int16(int8 varhigh,int8 varlow)" `370 
v L "var1" 1 605 "int16" `374 
f B "make32" 1 605 "int32(int16 var1)" `373 
v L "var1" 1 606 "int16" `376 
v L "var2" 1 606 "int16" `377 
f G "make32" 1 606 "int32(int16 var1,int16 var2)" `375 
v L "var1" 1 607 "int16" `376 
v L "var2" 1 607 "int8" `380 
f G "make32" 1 607 "int32(int16 var1,int8 var2)" `378 
v L "var1" 1 608 "int16" `382 
v L "var2" 1 608 "int8" `383 
v L "var3" 1 608 "int8" `384 
f G "make32" 1 608 "int32(int16 var1,int8 var2,int8 var3)" `381 
v L "var1" 1 609 "int8" `386 
f G "make32" 1 609 "int32(int8 var1)" `385 
v L "var1" 1 610 "int8" `376 
v L "var2" 1 610 "int8" `389 
f G "make32" 1 610 "int32(int8 var1,int8 var2)" `387 
v L "var1" 1 611 "int8" `382 
v L "var2" 1 611 "int8" `383 
v L "var3" 1 611 "int8" `393 
f G "make32" 1 611 "int32(int8 var1,int8 var2,int8 var3)" `390 
v L "var1" 1 612 "int8" `395 
v L "var2" 1 612 "int8" `396 
v L "var3" 1 612 "int8" `397 
v L "var4" 1 612 "int8" `398 
f G "make32" 1 612 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `394 
v L "var1" 1 613 "int8" `376 
v L "var2" 1 613 "int16" `401 
f G "make32" 1 613 "int32(int8 var1,int16 var2)" `399 
v L "var1" 1 614 "int8" `382 
v L "var2" 1 614 "int16" `383 
v L "var3" 1 614 "int8" `405 
f G "make32" 1 614 "int32(int8 var1,int16 var2,int8 var3)" `402 
v L "var1" 1 615 "int8" `382 
v L "var2" 1 615 "int8" `383 
v L "var3" 1 615 "int16" `409 
f G "make32" 1 615 "int32(int8 var1,int8 var2,int16 var3)" `406 
v L "var" 1 616 "int8" `411 
v L "bit" 1 616 "int8" `412 
f B "bit_set" 1 616 "void(int8 var,int8 bit)" `410 
v L "var" 1 617 "int16" `411 
v L "bit" 1 617 "int8" `415 
f G "bit_set" 1 617 "void(int16 var,int8 bit)" `413 
v L "var" 1 618 "int32" `411 
v L "bit" 1 618 "int8" `418 
f G "bit_set" 1 618 "void(int32 var,int8 bit)" `416 
v L "var" 1 619 "int8" `420 
v L "bit" 1 619 "int8" `421 
f B "bit_clear" 1 619 "void(int8 var,int8 bit)" `419 
v L "var" 1 620 "int16" `420 
v L "bit" 1 620 "int8" `424 
f G "bit_clear" 1 620 "void(int16 var,int8 bit)" `422 
v L "var" 1 621 "int32" `420 
v L "bit" 1 621 "int8" `427 
f G "bit_clear" 1 621 "void(int32 var,int8 bit)" `425 
v L "var" 1 622 "int8" `429 
v L "bit" 1 622 "int8" `430 
f B "bit_test" 1 622 "int8(int8 var,int8 bit)" `428 
v L "var" 1 623 "int16" `429 
v L "bit" 1 623 "int8" `433 
f G "bit_test" 1 623 "int8(int16 var,int8 bit)" `431 
v L "var" 1 624 "int32" `429 
v L "bit" 1 624 "int8" `436 
f G "bit_test" 1 624 "int8(int32 var,int8 bit)" `434 
v L "var" 1 625 "?" `411 
v L "bit" 1 625 "int8" `439 
f G "bit_set" 1 625 "void(? var,int8 bit)" `437 
v L "var" 1 626 "?" `411 
v L "bit" 1 626 "int8" `442 
f G "bit_set" 1 626 "void(? var,int8 bit)" `440 
v L "var" 1 627 "?" `420 
v L "bit" 1 627 "int8" `445 
f G "bit_clear" 1 627 "void(? var,int8 bit)" `443 
v L "var" 1 628 "?" `420 
v L "bit" 1 628 "int8" `448 
f G "bit_clear" 1 628 "void(? var,int8 bit)" `446 
v L "var" 1 629 "?" `429 
v L "bit" 1 629 "int8" `451 
f G "bit_test" 1 629 "int8(? var,int8 bit)" `449 
v L "var" 1 630 "?" `429 
v L "bit" 1 630 "int8" `454 
f G "bit_test" 1 630 "int8(? var,int8 bit)" `452 
v L "value" 1 631 "int8" `456 
v L "var" 1 631 "int16" `457 
f B "bit_first" 1 631 "int8(int8 value,int16 var)" `455 
v L "var" 1 632 "sint16" `459 
f B "bit_last" 1 632 "int8(sint16 var)" `458 
v L "value" 1 633 "int8" `461 
v L "var" 1 633 "sint16" `462 
f G "bit_last" 1 633 "int8(int8 value,sint16 var)" `460  "#use delay() Prototypes:"
v L "count" 1 636 "int16" `464 
f B "delay_cycles" 1 636 "void(int16 count)" `463 
v L "time" 1 637 "int16" `466 
f B "delay_ms" 1 637 "void(int16 time)" `465 
v L "time" 1 638 "int16" `468 
f B "delay_us" 1 638 "void(int16 time)" `467  "#use rs232() Prototypes:"
v L "cdata" 1 641 "sint8" `470 
f B "putchar" 1 641 "void(sint8 cdata)" `469 
v L "cdata" 1 642 "sint8" `472 
v L "stream" 1 642 "int8" `473 
f G "putchar" 1 642 "void(sint8 cdata,int8 stream)" `471 
v L "string" 1 643 "*sint8" `475 
f B "puts" 1 643 "void(*sint8 string)" `474 
v L "string" 1 644 "*sint8" `477 
v L "stream" 1 644 "int8" `478 
f G "puts" 1 644 "void(*sint8 string,int8 stream)" `476 
f B "getch" 1 645 "sint8()" `479 
v L "stream" 1 646 "int8" `481 
f G "getch" 1 646 "sint8(int8 stream)" `480 
v L "string" 1 647 "*sint8" `483 
f B "gets" 1 647 "void(*sint8 string)" `482 
v L "string" 1 648 "*sint8" `485 
v L "stream" 1 648 "int8" `486 
f G "gets" 1 648 "void(*sint8 string,int8 stream)" `484 
f B "kbhit" 1 649 "int8()" `487 
v L "stream" 1 650 "int8" `489 
f G "kbhit" 1 650 "int8(int8 stream)" `488 
v L "string" 1 651 "*sint8" `491 
f B "printf" 1 651 "void(*sint8 string,*int8 _VA_LIST)" `490 
v L "stream" 1 652 "int8" `494 
v L "string" 1 652 "*sint8" `495 
f B "fprintf" 1 652 "void(int8 stream,*sint8 string,*int8 _VA_LIST)" `493 
f B "putc_send" 1 653 "void()" `497 
v L "stream" 1 654 "int8" `499 
f B "fputc_send" 1 654 "void(int8 stream)" `498 
f B "rcv_buffer_full" 1 655 "int8()" `500 
v L "stream" 1 656 "int8" `502 
f G "rcv_buffer_full" 1 656 "int8(int8 stream)" `501 
f B "rcv_buffer_bytes" 1 657 "int16()" `503 
v L "stream" 1 658 "int8" `505 
f G "rcv_buffer_bytes" 1 658 "int16(int8 stream)" `504 
f B "tx_buffer_full" 1 659 "int8()" `506 
v L "stream" 1 660 "int8" `508 
f G "tx_buffer_full" 1 660 "int8(int8 stream)" `507 
f B "tx_buffer_bytes" 1 661 "int16()" `509 
v L "stream" 1 662 "int8" `511 
f G "tx_buffer_bytes" 1 662 "int16(int8 stream)" `510  "#use i2c() Prototypes:"
f B "i2c_read" 1 665 "int8()" `512 
v L "stream" 1 666 "int8" `514 
f G "i2c_read" 1 666 "int8(int8 stream)" `513 
v L "stream" 1 667 "int8" `516 
v L "ack" 1 667 "int8" `517 
f G "i2c_read" 1 667 "int8(int8 stream,int8 ack)" `515 
v L "data" 1 668 "int8" `519 
f B "i2c_write" 1 668 "int8(int8 data)" `518 
v L "stream" 1 669 "int8" `521 
v L "data" 1 669 "int8" `522 
f G "i2c_write" 1 669 "int8(int8 stream,int8 data)" `520 
f B "i2c_start" 1 670 "void()" `523 
v L "stream" 1 671 "int8" `525 
f G "i2c_start" 1 671 "void(int8 stream)" `524 
v L "stream" 1 672 "int8" `527 
v L "restart" 1 672 "int8" `528 
f G "i2c_start" 1 672 "void(int8 stream,int8 restart)" `526 
f B "i2c_stop" 1 673 "void()" `529 
v L "stream" 1 674 "int8" `531 
f G "i2c_stop" 1 674 "void(int8 stream)" `530 
f B "i2c_isr_state" 1 675 "sint8()" `532 
v L "addr" 1 676 "int8" `534 
f B "i2c_slaveaddr" 1 676 "void(int8 addr)" `533 
v L "stream" 1 677 "int8" `536 
v L "addr" 1 677 "int8" `537 
f G "i2c_slaveaddr" 1 677 "void(int8 stream,int8 addr)" `535 
f B "i2c_poll" 1 678 "int8()" `538 
v L "stream" 1 679 "int8" `540 
f G "i2c_poll" 1 679 "int8(int8 stream)" `539 
v L "baud" 1 680 "int32" `542 
f B "i2c_init" 1 680 "void(int32 baud)" `541 
v L "stream" 1 681 "int8" `544 
v L "baud" 1 681 "int32" `545 
f G "i2c_init" 1 681 "void(int8 stream,int32 baud)" `543  "#use spi() Prototypes:"
f B "spi_xfer" 1 684 "int8()" `546 
f G "spi_xfer" 1 685 "int16()" `547 
f G "spi_xfer" 1 686 "int32()" `548 
v L "data" 1 687 "int8" `550 
f G "spi_xfer" 1 687 "int8(int8 data)" `549 
v L "data" 1 688 "int16" `552 
f G "spi_xfer" 1 688 "int16(int16 data)" `551 
v L "data" 1 689 "int32" `554 
f G "spi_xfer" 1 689 "int32(int32 data)" `553 
v L "stream" 1 690 "int8" `556 
v L "data" 1 690 "int8" `557 
f G "spi_xfer" 1 690 "int8(int8 stream,int8 data)" `555 
v L "stream" 1 691 "int8" `556 
v L "data" 1 691 "int16" `560 
f G "spi_xfer" 1 691 "int16(int8 stream,int16 data)" `558 
v L "stream" 1 692 "int8" `556 
v L "data" 1 692 "int32" `563 
f G "spi_xfer" 1 692 "int32(int8 stream,int32 data)" `561 
v L "stream" 1 693 "int8" `565 
v L "data" 1 693 "int8" `566 
v L "bits" 1 693 "int8" `567 
f G "spi_xfer" 1 693 "int8(int8 stream,int8 data,int8 bits)" `564 
v L "stream" 1 694 "int8" `565 
v L "data" 1 694 "int16" `566 
v L "bits" 1 694 "int8" `571 
f G "spi_xfer" 1 694 "int16(int8 stream,int16 data,int8 bits)" `568 
v L "stream" 1 695 "int8" `565 
v L "data" 1 695 "int32" `566 
v L "bits" 1 695 "int8" `575 
f G "spi_xfer" 1 695 "int32(int8 stream,int32 data,int8 bits)" `572 
v L "baud" 1 696 "int32" `577 
f B "spi_init" 1 696 "void(int32 baud)" `576 
v L "stream" 1 697 "int8" `579 
v L "baud" 1 697 "int32" `580 
f G "spi_init" 1 697 "void(int8 stream,int32 baud)" `578 
v L "baud" 1 698 "int32" `582 
f B "spi_speed" 1 698 "void(int32 baud)" `581 
v L "stream" 1 699 "int8" `584 
v L "baud" 1 699 "int32" `585 
f G "spi_speed" 1 699 "void(int8 stream,int32 baud)" `583 
v L "stream" 1 700 "int8" `587 
v L "baud" 1 700 "int32" `588 
v L "clock" 1 700 "int32" `589 
f G "spi_speed" 1 700 "void(int8 stream,int32 baud,int32 clock)" `586 
v L "data" 1 701 "int8" `591 
f B "spi_prewrite" 1 701 "void(int8 data)" `590 
v L "data" 1 702 "int16" `593 
f G "spi_prewrite" 1 702 "void(int16 data)" `592 
v L "data" 1 703 "int32" `595 
f G "spi_prewrite" 1 703 "void(int32 data)" `594 
v L "??65535" 1 704 "int8" `597 
v L "data" 1 704 "int8" `598 
f G "spi_prewrite" 1 704 "void(int8 ,int8 data)" `596 
v L "??65535" 1 705 "int8" `597 
v L "data" 1 705 "int16" `601 
f G "spi_prewrite" 1 705 "void(int8 ,int16 data)" `599 
v L "??65535" 1 706 "int8" `597 
v L "data" 1 706 "int32" `604 
f G "spi_prewrite" 1 706 "void(int8 ,int32 data)" `602 
f B "spi_xfer_in" 1 707 "int8()" `605 
f G "spi_xfer_in" 1 708 "int16()" `606 
f G "spi_xfer_in" 1 709 "int32()" `607 
v L "bits" 1 710 "int8" `609 
f G "spi_xfer_in" 1 710 "int8(int8 bits)" `608 
v L "bits" 1 711 "int8" `611 
f G "spi_xfer_in" 1 711 "int16(int8 bits)" `610 
v L "bits" 1 712 "int8" `613 
f G "spi_xfer_in" 1 712 "int32(int8 bits)" `612 
v L "stream" 1 713 "int8" `615 
v L "bits" 1 713 "int8" `616 
f G "spi_xfer_in" 1 713 "int8(int8 stream,int8 bits)" `614 
v L "stream" 1 714 "int8" `615 
v L "bits" 1 714 "int8" `619 
f G "spi_xfer_in" 1 714 "int16(int8 stream,int8 bits)" `617 
v L "stream" 1 715 "int8" `615 
v L "bits" 1 715 "int8" `622 
f G "spi_xfer_in" 1 715 "int32(int8 stream,int8 bits)" `620  "#use rtos() Prototypes:"
f B "rtos_run" 1 718 "void()" `623 
f B "rtos_yield" 1 719 "void()" `624 
v L "task" 1 720 "int8" `626 
f B "rtos_enable" 1 720 "void(int8 task)" `625 
v L "task" 1 721 "int8" `628 
f B "rtos_disable" 1 721 "void(int8 task)" `627 
f B "rtos_terminate" 1 722 "void()" `629 
v L "flag" 1 723 "int8" `631 
f B "rtos_await" 1 723 "void(int8 flag)" `630 
v L "sem" 1 724 "int8" `633 
f B "rtos_wait" 1 724 "void(int8 sem)" `632 
v L "sem" 1 725 "int8" `635 
f B "rtos_signal" 1 725 "void(int8 sem)" `634 
v L "task" 1 726 "int8" `637 
v L "msg" 1 726 "int8" `638 
f B "rtos_msg_send" 1 726 "void(int8 task,int8 msg)" `636 
f B "rtos_msg_read" 1 727 "int8()" `639 
f B "rtos_msg_poll" 1 728 "int8()" `640 
v L "task" 1 729 "int8" `642 
f B "rtos_overrun" 1 729 "int8(int8 task)" `641 
v L "task" 1 730 "int8" `644 
v L "stat" 1 730 "*int8" `645 
f B "rtos_stats" 1 730 "void(int8 task,*int8 stat)" `643  "#use timer() Prototypes:"
f B "get_ticks" 1 733 "int8()" `646 
f G "get_ticks" 1 734 "int16()" `647 
f G "get_ticks" 1 735 "int32()" `648 
f G "get_ticks" 1 736 "?()" `649 
v L "stream" 1 737 "int8" `651 
f G "get_ticks" 1 737 "int8(int8 stream)" `650 
v L "stream" 1 738 "int8" `653 
f G "get_ticks" 1 738 "int16(int8 stream)" `652 
v L "stream" 1 739 "int8" `655 
f G "get_ticks" 1 739 "int32(int8 stream)" `654 
v L "stream" 1 740 "int8" `657 
f G "get_ticks" 1 740 "?(int8 stream)" `656 
v L "value" 1 741 "int8" `659 
f B "set_ticks" 1 741 "void(int8 value)" `658 
v L "value" 1 742 "int16" `661 
f G "set_ticks" 1 742 "void(int16 value)" `660 
v L "value" 1 743 "int32" `663 
f G "set_ticks" 1 743 "void(int32 value)" `662 
v L "value" 1 744 "?" `665 
f G "set_ticks" 1 744 "void(? value)" `664 
v L "stream" 1 745 "int8" `667 
v L "value" 1 745 "int8" `668 
f G "set_ticks" 1 745 "void(int8 stream,int8 value)" `666 
v L "stream" 1 746 "int8" `667 
v L "value" 1 746 "int16" `671 
f G "set_ticks" 1 746 "void(int8 stream,int16 value)" `669 
v L "stream" 1 747 "int8" `667 
v L "value" 1 747 "int32" `674 
f G "set_ticks" 1 747 "void(int8 stream,int32 value)" `672 
v L "stream" 1 748 "int8" `667 
v L "value" 1 748 "?" `677 
f G "set_ticks" 1 748 "void(int8 stream,? value)" `675  "#use pwm() Prototypes:"
f B "pwm_on" 1 751 "void()" `678 
v L "stream" 1 752 "int8" `680 
f G "pwm_on" 1 752 "void(int8 stream)" `679 
f B "pwm_off" 1 753 "void()" `681 
v L "stream" 1 754 "int8" `683 
f G "pwm_off" 1 754 "void(int8 stream)" `682 
v L "duty" 1 755 "int16" `685 
f B "pwm_set_duty" 1 755 "void(int16 duty)" `684 
v L "stream" 1 756 "int8" `687 
v L "duty" 1 756 "int16" `688 
f G "pwm_set_duty" 1 756 "void(int8 stream,int16 duty)" `686 
v L "percent" 1 757 "int16" `690 
f B "pwm_set_duty_percent" 1 757 "void(int16 percent)" `689 
v L "stream" 1 758 "int8" `692 
v L "percent" 1 758 "int16" `693 
f G "pwm_set_duty_percent" 1 758 "void(int8 stream,int16 percent)" `691 
v L "frequency" 1 759 "int32" `695 
f B "pwm_set_frequency" 1 759 "void(int32 frequency)" `694 
v L "stream" 1 760 "int8" `697 
v L "frequency" 1 760 "int32" `698 
f G "pwm_set_frequency" 1 760 "void(int8 stream,int32 frequency)" `696  "#use capture() Prototypes:"
f B "get_capture_time" 1 763 "int16()" `699 
v L "stream" 1 764 "int8" `701 
f G "get_capture_time" 1 764 "int16(int8 stream)" `700 
f B "get_capture_event" 1 765 "int8()" `702 
v L "stream" 1 766 "int8" `704 
f G "get_capture_event" 1 766 "int8(int8 stream)" `703  "Enviroment Prototypes:"
c L "get_capture_event" 1 3 2 "FUNCTION"
v L "address" 1 775 "int16" `706 
f B "goto_address" 1 775 "void(int16 address)" `705 
v L "label" 1 776 "int16" `708 
f B "label_address" 1 776 "int16(int16 label)" `707  "Program Memory Prototypes:"
v L "address" 1 779 "int16" `710 
v L "dataptr" 1 779 "*int8" `711 
v L "count" 1 779 "int16" `712 
f B "read_program_memory" 1 779 "void(int16 address,*int8 dataptr,int16 count)" `709 
v L "address" 1 780 "int16" `714 
f B "erase_program_memory" 1 780 "void(int16 address)" `713 
v L "address" 1 781 "int16" `716 
v L "dataptr" 1 781 "*int8" `717 
v L "count" 1 781 "int16" `718 
f B "write_program_memory" 1 781 "void(int16 address,*int8 dataptr,int16 count)" `715 
v L "dataptr" 1 782 "*int8" `720 
v L "count" 1 782 "int8" `721 
f B "read_configuration_memory" 1 782 "void(*int8 dataptr,int8 count)" `719 
v L "dataptr" 1 783 "*int8" `723 
v L "count" 1 783 "int8" `724 
f B "write_configuration_memory" 1 783 "void(*int8 dataptr,int8 count)" `722  "INT"
c L "write_configuration_memory" 1 3 4 "FUNCTION"
v L "interrupt" 1 790 "int16" `726 
f B "enable_interrupts" 1 790 "void(int16 interrupt)" `725 
v L "interrupt" 1 791 "int16" `728 
f B "disable_interrupts" 1 791 "void(int16 interrupt)" `727 
v L "interrupt" 1 792 "int16" `730 
f B "clear_interrupt" 1 792 "void(int16 interrupt)" `729 
v L "interrupt" 1 793 "int16" `732 
f B "interrupt_active" 1 793 "int8(int16 interrupt)" `731 
v L "interrupt" 1 794 "int16" `734 
f B "interrupt_enabled" 1 794 "int8(int16 interrupt)" `733 
v L "source" 1 795 "int8" `736 
v L "edge" 1 795 "int8" `737 
f B "ext_int_edge" 1 795 "void(int8 source,int8 edge)" `735 
v L "address" 1 796 "int16" `739 
f B "jump_to_isr" 1 796 "void(int16 address)" `738  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 1 798 "0x40"
d G "H_TO_L" 1 799 "0"
d G "INTR_GLOBAL" 1 802 "0x400"
d G "GLOBAL" 1 803 "0x400" "For compatibility with PIC16/18"
d G "INTR_NORMAL" 1 804 "0x100	"
d G "INTR_ALTERNATE" 1 805 "0x200"
d G "INTR_LEVEL0" 1 806 "0x500"
d G "INTR_LEVEL1" 1 807 "0x501"
d G "INTR_LEVEL2" 1 808 "0x502"
d G "INTR_LEVEL3" 1 809 "0x503"
d G "INTR_LEVEL4" 1 810 "0x504"
d G "INTR_LEVEL5" 1 811 "0x505"
d G "INTR_LEVEL6" 1 812 "0x506"
d G "INTR_LEVEL7" 1 813 "0x507"
d G "INTR_CN_PIN" 1 815 "0x8000" "or in a PIN_xx constant"
d G "INT_OSCFAIL" 1 817 "1"
d G "INT_ADDRERR" 1 818 "2"
d G "INT_STACKERR" 1 819 "3"
d G "INT_MATHERR" 1 820 "4"
d G "INT_EXT0" 1 821 "6"
d G "INT_IC1" 1 822 "7"
d G "INT_OC1" 1 823 "8"
d G "INT_TIMER1" 1 824 "9"
d G "INT_IC2" 1 825 "70"
d G "INT_OC2" 1 826 "71"
d G "INT_TIMER2" 1 827 "72"
d G "INT_TIMER3" 1 828 "73"
d G "INT_SPI1E" 1 829 "74"
d G "INT_SPI1" 1 830 "75"
d G "INT_RDA" 1 831 "76"
d G "INT_TBE" 1 832 "77"
d G "INT_ADC1" 1 833 "78"
d G "INT_SI2C" 1 834 "81"
d G "INT_MI2C" 1 835 "82"
d G "INT_CNI" 1 836 "84"
d G "INT_EXT1" 1 837 "85"
d G "INT_OC3" 1 838 "90"
d G "INT_OC4" 1 839 "91"
d G "INT_TIMER4" 1 840 "92"
d G "INT_TIMER5" 1 841 "93"
d G "INT_EXT2" 1 842 "94"
d G "INT_RDA2" 1 843 "95"
d G "INT_TBE2" 1 844 "96"
d G "INT_SPI2E" 1 845 "97"
d G "INT_SPI2" 1 846 "98"
d G "INT_IC3" 1 847 "102"
d G "INT_IC4" 1 848 "103"
d G "INT_IC5" 1 849 "104"
d G "INT_OC5" 1 850 "106"
d G "INT_SI2C2" 1 851 "114"
d G "INT_MI2C2" 1 852 "115"
d G "INT_UART1E" 1 853 "130"
d G "INT_UART2E" 1 854 "131"
d G "INT_COMP" 1 855 "152"
d G "INT_PMP" 1 856 "164"
d G "INT_RTC" 1 857 "173"
d G "INT_CRC" 1 858 "174"
d G "INT_LVD" 1 859 "179"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
C L "jump_to_isr" 2 1 1 "*"
D G "BL_SUPPORT_H" 2 9 ""
D G "LOADER_PAGES" 2 17 "3"
D G "ERASE_SIZE" 2 18 "2048" "2048 bytes, 24-bit (3 bytes) per instruction, but it uses 4 bytes aligned --> 4 bytes per word"
D G "LOADER_SIZE" 2 20 " ((LOADER_PAGES * (ERASE_SIZE/2)) - 1)" "2 bytes per address, so divided by 2, 2048/2 = 1024"
D G "LOADER_END" 2 21 "LOADER_SIZE" "End address"
D G "LOADER_ADDR" 2 22 "0xC00" "(LOADER_END - LOADER_SIZE)       /* Start address    */"
C L "jump_to_isr" 2 1 3 "FUNCTION"
C L "jump_to_isr" 0 5 5 "FUNCTION"
C L "jump_to_isr" 0 13 1 "*"
C L "jump_to_isr" 0 13 1 "*"
C L "jump_to_isr" 0 13 2 "*"
V G "type" 0 23 "sint16" `747 
V G "Orientation" 0 24 "int32" `748 
V G "state_keep" 0 25 "sint16" `749 
V G "x" 0 42 "{? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error}" `765 
V G "Y" 0 43 "{? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error}" `766 
V G "Z" 0 44 "{? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error}" `767 
V G "data_recieve" 0 55 "int8[11]" `768 
V G "SM_BufIdx" 0 56 "sint16" `769 
V G "state_serial" 0 56 "sint16" `770 
V G "SM_Id" 0 57 "sint8" `771 
V G "SM_check" 0 58 "sint8" `772 
V G "flag1" 0 59 "int1" `773 
V G "flag2" 0 59 "int1" `774 
V G "flag3" 0 59 "int1" `775 
C L "jump_to_isr" 0 13 19 "FUNCTION"
V L "c" 0 85 "sint8" `777 
F G "SM_RxD" 0 85 "void(sint8 c)" `776 
C L "SM_RxD" 0 13 2 "FUNCTION"
C L "SM_RxD" 0 13 1 "FUNCTION"
C L "SM_RxD" 0 13 1 "FUNCTION"
C L "SM_RxD" 0 13 1 "FUNCTION"
C L "SM_RxD" 0 13 1 "FUNCTION"
F G "UART1_ISR" 0 151 "void()" `778 
V L "c" 0 152 "sint8" `779 
C L "UART1_ISR" 0 13 1 "FUNCTION"
F G "INT_EXT_INPUT0" 0 158 "void()" `780 
C L "INT_EXT_INPUT0" 0 13 1 "FUNCTION"
F G "INT_EXT_INPUT1" 0 168 "void()" `781 
F G "INT_EXT_INPUT2" 0 175 "void()" `782 
C L "INT_EXT_INPUT2" 0 13 1 "FUNCTION"
V L "A" 0 183 "{? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error}" `784 
F G "PID_pwm" 0 183 "sint16({? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error} A)" `783 
F G "Timer2_ISR" 0 196 "void()" `798 
F G "Init_Timer2" 0 201 "void()" `799 
F G "Init_Interrupts" 0 206 "void()" `800 
V L "direct" 0 217 "sint16" `802 
F G "MotorX" 0 217 "void(sint16 direct)" `801 
V L "direct" 0 223 "sint16" `804 
F G "MotorY" 0 223 "void(sint16 direct)" `803 
V L "direct" 0 229 "sint16" `806 
F G "MotorZ" 0 229 "void(sint16 direct)" `805 
V L "state_keep" 0 235 "sint16" `808 
V L "type" 0 235 "sint16" `809 
F G "Servo_Keep" 0 235 "void(sint16 state_keep,sint16 type)" `807 
C L "Servo_Keep" 0 13 1 "FUNCTION"
C L "Servo_Keep" 0 13 1 "FUNCTION"
V L "A" 0 255 "{? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error}" `811 
F G "Initial_Motor" 0 255 "void({? pwm,sint16 state,sint16 direction,sint16 encoder,sint16 target,sint16 error,sint16 p_error,? Kp,? Ki,? Kd,? P,? I,? D,? Sum_error} A)" `810 
F G "MAIN" 0 274 "void()" `812 
V L "first_step" 0 275 "sint16" `813 
V L "first_command" 0 276 "sint16" `814 
V L "state_all" 0 277 "sint16" `815 
V L "count_print" 0 308 "sint16" `818 
C L "MAIN" 0 13 1 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
C L "MAIN" 0 13 3 "FUNCTION"
C L "MAIN" 0 13 2 "FUNCTION"
V L "temp_x" 0 344 "sint16" `826 
V L "temp_y" 0 344 "sint16" `827 
V L "temp_z" 0 344 "sint16" `828 
C L "MAIN" 0 13 43 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
C L "MAIN" 0 13 14 "FUNCTION"
C L "MAIN" 0 13 1 "FUNCTION"
V L "sim_state_x" 0 501 "sint16" `834 
V L "sim_state_y" 0 501 "sint16" `835 
V L "sim_state_z" 0 501 "sint16" `836 
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep" 0 1
F B "delay_cycles" 1 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "bit_first" 2 0
F B "bit_last" 1 2
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "profileout" 1 2
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_program_memory" 3 0
F B "read_rom_memory" 3 0
F B "erase_program_memory" 1 0
F B "write_program_memory" 3 0
F B "write_configuration_memory" 2 3
F B "read_configuration_memory" 2 3
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "set_open_drain_a" 1 0
F B "set_open_drain_b" 1 0
F B "set_pullup" 1 2
F B "pin_select" 2 4
F B "setup_wdt" 1 0
F B "restart_cause" 0 1
F B "restart_wdt" 0 0
F B "setup_oscillator" 1 3
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer1" 1 2
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer2" 1 2
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_timer3" 1 2
F B "get_timer3" 0 0
F B "set_timer3" 1 0
F B "get_timer23" 0 0
F B "set_timer23" 1 0
F B "setup_timer4" 1 2
F B "get_timer4" 0 0
F B "set_timer4" 1 0
F B "setup_timer5" 1 2
F B "get_timer5" 0 0
F B "set_timer5" 1 0
F B "get_timer45" 0 0
F B "set_timer45" 1 0
F B "setup_capture" 2 0
F B "get_capture" 1 2
F B "setup_compare" 2 0
F B "set_compare_time" 2 3
F B "set_pwm_duty" 2 0
F B "setup_vref" 1 0
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "spi_read_16" 0 1
F B "spi_write_16" 1 2
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 2
F B "spi_data_is_in2" 0 0
F B "spi_read2_16" 0 1
F B "spi_write2_16" 1 2
F B "setup_spi3" 1 0
F B "spi_read3" 0 1
F B "spi_write3" 1 2
F B "spi_data_is_in3" 0 0
F B "spi_read3_16" 0 1
F B "spi_write3_16" 1 2
F B "setup_spi4" 1 0
F B "spi_read4" 0 1
F B "spi_write4" 1 2
F B "spi_data_is_in4" 0 0
F B "spi_read4_16" 0 1
F B "spi_write4_16" 1 2
F B "setup_crc" F B "crc_init" 0 1
F B "crc_calc8" 1 2
F B "crc_calc" 1 2
F B "crc_calc16" 1 2
F B "setup_pmp" 2 0
F B "setup_psp" 2 0
F B "pmp_address" 1 0
F B "pmp_read" 0 0
F B "pmp_write" 1 0
F B "psp_read" 0 1
F B "psp_write" 1 2
F B "psp_output_full" 0 0
F B "psp_input_full" 0 0
F B "psp_overflow" 0 0
F B "pmp_output_full" 0 0
F B "pmp_input_full" 0 0
F B "pmp_overflow" 0 0
F B "setup_rtc" 1 2
F B "setup_rtc_alarm" 1 3
F B "rtc_read" 1 0
F B "rtc_write" 1 0
F B "rtc_alarm_read" 1 0
F B "rtc_alarm_write" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "putchar" 1 2
F B "puts" 1 2
F B "getch" 0 1
F B "gets" 1 3
F B "kbhit" 0 1
F B "set_uart_speed" 1 3
F B "setup_uart" 1 3
